--------------------------------------------------------------------------------------------------
TODO

GUI
	-	http://highschool.cs.vt.edu/Svc2012/S2012/gui-events-slides.pdf
	-	https://courses.cs.washington.edu/courses/cse331/13sp/lectures/lect23-graphics.pdf
	
COMMENT ON ALL THINGS
	-	Texture

Change from platform conditional includes (InputImpl) to typedefs (WindowImpl)?

Remove glew/opengl from zeno lib, instead have swapBuffer() etc for display

Look at http://visualgdb.com/tutorials/linux/ for developing on windows for linux

AdjustWindowRect to have windows be the actual size. not including the frame
-	Also check/modify all the window get/set size functions

Set v-sync etc or desired fps

LShift doesnt work

Implement window styles

change all Deconstructor to Destructor

use find_required in cmake for glew, opengl, freetype etc

have shared libraries be created as well
	-	Test that all 4 library versions work on both platforms

look into if a abstract base class "Drawable" etc is a good thing
	-	For vertex array, sprite implement drawable


Implement doxygen into header files

implement sleep function

add passing uniforms into vertex arrays	-	similar to sfml renderstates

opengl contexts when using different windows

have shaders work with multiple textures for vertex array?
have shader for when a texture is/isnt used with vertex array

2d transformable
	-	Apply to text
	-	Apply to sprite
	
	
3d transformable

have RenderData take in a shader name, and then a drawable sub class with overloaded window render method of (const zeno::Drawable& _drawable, zeno::RenderData _renderData)

Fonts/Text
	-	Look into options for texture atlas size, start width > 512 etc, max size
	-	Have generateText add glyphs to the atlas
	-	Change way they are rendered so it defaults to the default shader, but if other is set will use that
	-	Fix overlapping font quads not 
	-	Redo to use signed distance field technqiue, maybe not worth it. Look back into freetype  - autohinting for small font sizes
		-	http://contourtextures.wikidot.com/
		-	Valve paper, use 2 channel to preserve sharp corners
		-	http://webstaff.itn.liu.se/~stegu/aadist/edtaa_preprint.pdf
		-	Look at signed distance field for specific usage cases, default is freetype textured quads

find better way to update textures than completely recreating them (i.e. as in font) Pixel Buffer Objects

add in generic headers for each different sub module

inherit Transformable2D for gui objects
GuiDesktop better event management (not using created events instantly)
implement names/id's for all guibase objects so events can go to specific objects

consistancy when using sizeof(float), change all to sizeof(GLfloat)


Greater Goals
	-	Make application to create gui layouts, then export to a file
	
Sprite
	-	Creating with default constructor crashes (in seperate project, maybe build process is weird, setting texture rectangle issue)

GUIDesktop
	-	implement names/id's for all guibase objects so events can go to specific objects
	-	Have it as a member of the window? user has to set it so its not wasteful etc
	-	Set a single font for entire gui desktop or per pane?
	-	Each pane should gather up all verticies for all components it contains, so drawing a pane is 1 draw call for verticies and 1 for text?
	-	Dont create a new component then add, rather use GUIDesktop like a factory
	-	Maybe have quad tree for doing GUIPane bounding checks?
	-	Add to window.pollEvent() to pass to the desktop if it is present

GuiPane
	-	Have fast opt out of event handling, have objects register with panes what events they want

GUIBase
	-	have visible/enabled etc 
	-	may need to have disabled colours for elements, or just tone the colours down?
	-	need to have function to return start and end heights of created verticies

ProgressBar
	-	Have option for indeterminate length, ie |             []				| with [] moving
	-	Change position to use uniform passed to shader
	-	Change size to use uniform passed to shader
	-	Generalise position, size getters/setters
	-	Rewrite constructor so no data is buffered in it, have seperate functions use glBufferSubData
	-	When complete pulse the bar to indicate completeness

Button
	-	Need to add label to the button etc
	-	Add methods to get/set colours, size, position, outline thickness
	
Slider
	-	Need to clean up vertex creation
	
Random Number
	-	Put wrapper around c++11 functions for simple use cases
	
Profiler
	-	Visual debug info etc
	
Shader
	-	 Put a comment in the destructor of zeno::Shader, seems to be called excessively
	
Particle System
	-	Using Geometry shader and point sprites (GL_POINT_SPRITE, )
	
Image
	-	Implement expand vertically method
	
Texture
	-	Comment
	-	Implement setting min/mag filter options
	-	Look into modifying texture, expanding etc
	-	Have persistant options for texture, stay when reloaded
	
---------------------------------------------------------------------------------------------------
COMPLETE

textures 
vertexes
vertex arrays
sprites

add sub directories for gui code, window code, graphics, networking, audio, system
add different libraries for each sub directory
Change all #ifndef INCLUDED_FILENAME_EXTENSION's to something with the project name etc in it

Fonts
	-	move font stuff to graphics
	-	2d orthographic text
	-	basic implementation complete
	-	Add kerning
	
Progress Bar
	-	Have text numbers denoting percentage? - Simply draw it above it, not needed.
	-	Can change colour of outline, incomplete and complete sections
	
Slider
	-	Basic slider implemented, can be discrete or continuous
	
GUIDesktop
	-	get the component back by id
	
Image
	-	Implement copy method