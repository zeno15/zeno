#ifndef INCLUDED_MAT_4_X_4_HPP
#define INCLUDED_MAT_4_X_4_HPP

#include <string>
#include <vector>

#include "Vector3.hpp"
#include "Vector4.hpp"

namespace zeno {

////////////////////////////////////////////////////////////
//
//	4x4 Matrix class for 3D point manipulation
//	When accessing at an index the values are arranged as follows;
//
//	0	4	8	12
//	1	5	9	13
//	2	6	10	14
//	3	7	11	15
//
//	ie, column major, for OpenGL.
//
////////////////////////////////////////////////////////////
class Mat4x4
{
public:
	////////////////////////////////////////////////////////////
	//
	//	Default constructor, initialises all elements to zero
	//
	////////////////////////////////////////////////////////////
	Mat4x4(void);

	////////////////////////////////////////////////////////////
	//
	//	Initialises matrix to I * scalar
	//
	////////////////////////////////////////////////////////////
	Mat4x4(float _val);

	////////////////////////////////////////////////////////////
	//
	//	Initialises the uppermost lefthand 3x3 corner to
	//	the values of the given column vectors
	//
	////////////////////////////////////////////////////////////
	Mat4x4(Vector3<float> _x, Vector3<float> _y, Vector3<float> _z);

	////////////////////////////////////////////////////////////
	//
	//	Initialises the matrix with the given values
	//
	////////////////////////////////////////////////////////////
	Mat4x4(float _1, float _5, float _9, float _13,
	       float _2, float _6, float _10, float _14,
	       float _3, float _7, float _11, float _15,
	       float _4, float _8, float _12, float _16);
	
	////////////////////////////////////////////////////////////
	//
	//	Initialise the matrix from another matrix
	//
	////////////////////////////////////////////////////////////
	Mat4x4(const Mat4x4& _mat);
	
	////////////////////////////////////////////////////////////
	//
	//	Returns constant pointer to the start of the date
	//	primarily for passing to opengl functions
	//
	////////////////////////////////////////////////////////////
	const float *pointer(void) const;
	
	////////////////////////////////////////////////////////////
	//
	//	Modifies the matrix so it become the transpose
	//
	////////////////////////////////////////////////////////////
	Mat4x4& transpose(void);
	
	////////////////////////////////////////////////////////////
	//
	//	Modifies the matrix so it becomes inverted
	//
	////////////////////////////////////////////////////////////
	Mat4x4& inverse(void);
	
	////////////////////////////////////////////////////////////
	//
	//	Creates a matrix representing an orthographic view
	//	for use in 2D space
	//
	////////////////////////////////////////////////////////////
	static Mat4x4 Orthographic2D(const float& _left, const float& _right, const float& _top, const float& _bottom);
	
	////////////////////////////////////////////////////////////
	//
	//	Creates a matrix representing an orthographic view
	//	for use in 3D space
	//
	////////////////////////////////////////////////////////////
	static Mat4x4 Orthographic3D(const float& _left, const float& _right, const float& _top, const float& _bottom, const float& _near, const float& _far);
	
	////////////////////////////////////////////////////////////
	//
	//	Creates the lookat matrix
	//
	////////////////////////////////////////////////////////////
	static Mat4x4 lookat(const Vector3<float>& _eye, const Vector3<float>& _pos, const Vector3<float>& _up);
	
	////////////////////////////////////////////////////////////
	//
	//	Creates the perspective projection matrix
	//
	////////////////////////////////////////////////////////////
	static Mat4x4 perspective(float _fov, float _aspectRatio, float _near, float _far);
	
	////////////////////////////////////////////////////////////
	//
	//	Returns read/write reference to given element
	//
	////////////////////////////////////////////////////////////
	float& operator[](int _right);
	
	////////////////////////////////////////////////////////////
	//
	//	Return read only reference to given element
	//
	////////////////////////////////////////////////////////////
	const float& operator[](int _right) const;
	
	////////////////////////////////////////////////////////////
	//
	//	Overload of assignment (=) operator
	//
	////////////////////////////////////////////////////////////
	void operator=(const Mat4x4& _right);
	
	private:
	////////////////////////////////////////////////////////////
	//
	//	Returns console friendly string version of the matrix
	//
	////////////////////////////////////////////////////////////
	friend std::ostream& operator<<(std::ostream& os, const Mat4x4& _mat);
	////////////////////////////////////////////////////////////
	//
	//	Overload of == operator
	//
	////////////////////////////////////////////////////////////
	friend bool operator ==(const Mat4x4& _left, const Mat4x4& _right);
	
	////////////////////////////////////////////////////////////
	//
	//	Returns the resultant vector when multiplying a matrix by a vector
	//
	////////////////////////////////////////////////////////////
	friend Vector4<float> operator*(const Mat4x4& _left, const Vector4<float>& _right);
	////////////////////////////////////////////////////////////
	//
	//	Returns the resultant vector when multiplying a matrix by a vector
	//
	////////////////////////////////////////////////////////////
	friend Vector3<float> operator*(const Mat4x4& _left, const Vector3<float>& _right);
	////////////////////////////////////////////////////////////
	//
	//	Returns the resultant matrix when multiplying one by another
	//
	////////////////////////////////////////////////////////////
	friend Mat4x4 operator*(const Mat4x4& _left, const Mat4x4& _right);

private:
	////////////////////////////////////////////////////////////
	//
	//	16 floats that make up the matrix
	//
	////////////////////////////////////////////////////////////
	std::vector<float> values;
};

////////////////////////////////////////////////////////////
//
//	Overload of << operator
//	Allows you to directly print contents of matrix
//
////////////////////////////////////////////////////////////
std::ostream& operator<<(std::ostream& os, const Mat4x4& _mat);

////////////////////////////////////////////////////////////
//
//	Overload of != operator
//	Checks if two matrices are different, no tolerance
//
////////////////////////////////////////////////////////////
bool operator !=(const Mat4x4& _left, const Mat4x4& _right);

} //~ namespace zeno

#endif //~ INCLUDED_MAT_4_X_4_HPP
