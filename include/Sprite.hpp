#ifndef INCLUDED_SPRITE_HPP
#define INCLUDED_SPRITE_HPP

#include <Rect.hpp>
#include <Transformable2D.hpp>
#include <VertexArray.hpp>

namespace zeno {
	
struct RenderData;
class Colour;
class Texture;

////////////////////////////////////////////////////////////
//
//	Class to display simple textured quad
//
////////////////////////////////////////////////////////////
class Sprite : public Transformable2D
{
public:
	////////////////////////////////////////////////////////////
	//
	//	Default constructor, creates empty sprite
	//
	////////////////////////////////////////////////////////////
	Sprite(void);

	////////////////////////////////////////////////////////////
	//
	//	Constructor, creates sprite from texture and given bounds
	//
	////////////////////////////////////////////////////////////
	Sprite(Texture *_texture, const FloatRect& _bounds = FloatRect());

	////////////////////////////////////////////////////////////
	//
	//	Destructor
	//
	////////////////////////////////////////////////////////////
	~Sprite(void);


	////////////////////////////////////////////////////////////
	//
	//	Sets the texture that the sprite uses
	//
	////////////////////////////////////////////////////////////
	void setTexture(Texture *_texture);

	////////////////////////////////////////////////////////////
	//
	//	Sets the texture coordinates of the sprite
	//
	////////////////////////////////////////////////////////////
	void setTextureBounds(const FloatRect& _bounds);

	////////////////////////////////////////////////////////////
	//
	//	Renders the sprite
	//
	////////////////////////////////////////////////////////////
	void render(RenderData& _data);

private:
	////////////////////////////////////////////////////////////
	//
	//	Generates the vertexArray
	//
	////////////////////////////////////////////////////////////
	void createVertexArray(void);

private:
	////////////////////////////////////////////////////////////
	//
	//	The texture the sprite uses
	//
	////////////////////////////////////////////////////////////
	Texture *				m_Texture;

	////////////////////////////////////////////////////////////
	//
	//	The vertex array representing the sprite
	//
	//	Vertex layout as follows
	//
	//	3	2
	//
	//	0	1
	//
	////////////////////////////////////////////////////////////
	VertexArray				m_VertexArray;

	////////////////////////////////////////////////////////////
	//
	//	The colour to set the sprite
	//
	////////////////////////////////////////////////////////////
	Colour					m_Colour;

	////////////////////////////////////////////////////////////
	//
	//	Size of the sprite
	//
	////////////////////////////////////////////////////////////
	Vector2f				m_Size;
};

} //~ namespace zeno

#endif //~ INCLUDED_SPRITE_HPP