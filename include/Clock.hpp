#ifndef INCLUDED_CLOCK_HPP
#define INCLUDED_CLOCK_HPP

#include "Time.hpp"

namespace zeno {

//~ For cross platform junk.
//~ https://github.com/LaurentGomila/SFML/blob/master/src/SFML/System/Unix/ClockImpl.hpp
//~ https://github.com/LaurentGomila/SFML/blob/master/src/SFML/System/Unix/ClockImpl.cpp
//~ https://github.com/LaurentGomila/SFML/blob/master/src/SFML/System/Win32/ClockImpl.cpp

////////////////////////////////////////////////////////////
//
//	Cross platform class for measuring time durations
//
////////////////////////////////////////////////////////////
class Clock
{
public:
	////////////////////////////////////////////////////////////
	//
	//	Default constructor, sets elapsed time to Zero
	//
	////////////////////////////////////////////////////////////
	Clock(void);
	////////////////////////////////////////////////////////////
	//
	//	Default deconstructor, unnessecary?
	//
	////////////////////////////////////////////////////////////
	~Clock(void);
	
	////////////////////////////////////////////////////////////
	//
	//	Method to get the elapsed time, the clock continues
	//
	////////////////////////////////////////////////////////////
	Time getElapsedTime(void);
	////////////////////////////////////////////////////////////
	//
	//	Method to restart the clock, also returns the elapsed time
	//
	////////////////////////////////////////////////////////////
	Time restart(void);
	
private:
	////////////////////////////////////////////////////////////
	//
	//	Internal method to get the current time used in calculations
	//
	////////////////////////////////////////////////////////////
	static Time getCurrentTime(void);
	
private:
	////////////////////////////////////////////////////////////
	//
	//	Variable keeping track of the start time of the clock
	//
	////////////////////////////////////////////////////////////
	Time m_StartTime;
};

} //~ namespace zeno

#endif //~ INCLUDED_CLOCK_HPP
