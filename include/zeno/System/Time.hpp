#ifndef INCLUDED_ZENO_SYSTEM_TIME_HPP
#define INCLUDED_ZENO_SYSTEM_TIME_HPP

#include <ostream>


////////////////////////////////////////////////////////////
///
///	\namespace	zeno
///
////////////////////////////////////////////////////////////
namespace zeno {

////////////////////////////////////////////////////////////
///
///	\brief	Class for mainpulating basic time operations
///
////////////////////////////////////////////////////////////
class Time
{
public:
	////////////////////////////////////////////////////////////
	///
	///	\brief	Default constructor
	///
	///	Initialises the time object at 0 seconds
	///
	////////////////////////////////////////////////////////////
	Time(void);
	
	////////////////////////////////////////////////////////////
	///
	///	\brief	Returns the value of this Time object in seconds
	///
	///	\return	float representing Time object in seconds
	///
	////////////////////////////////////////////////////////////
	float asSeconds(void) const;
	////////////////////////////////////////////////////////////
	///
	///	\brief	Returns the value of this Time object in milli 
	///			seconds
	///
	///	\return	long representing Time object in milli seconds
	///
	////////////////////////////////////////////////////////////
	long asMilliseconds(void) const;
	////////////////////////////////////////////////////////////
	///
	///	\brief	Returns the value of this Time object in micro 
	///			seconds
	///
	///	\return	long long representing Time object in micro 
	///			seconds
	///
	////////////////////////////////////////////////////////////
	long long asMicroseconds(void) const;
	
	////////////////////////////////////////////////////////////
	///
	///	\brief	Creates a Time object from an amount of seconds
	///
	///	\param	_seconds	amount of seconds
	///
	///	\return	Time object created from the amount of seconds
	///
	////////////////////////////////////////////////////////////
	static Time seconds(const float& _seconds);
	////////////////////////////////////////////////////////////
	///
	///	\brief	Creates a Time object from an amount of milli 
	///			seconds
	///
	///	\param	_milliseconds	amount of milli seconds
	///
	///	\return	Time object created from the amount of milli 
	///			seconds
	///
	////////////////////////////////////////////////////////////
	static Time milliseconds(const long& _milliseconds);
	////////////////////////////////////////////////////////////
	///
	///	\brief	Creates a Time object from an amount of micro 
	///			seconds
	///
	///	\param	_microseconds	amount of micro seconds
	///
	///	\return	Time object created from the amount of micro 
	///			seconds
	///
	////////////////////////////////////////////////////////////
	static Time microseconds(const long long& _microseconds);

private:
	////////////////////////////////////////////////////////////
	///
	///	\brief	Internal constructor
	///
	///	Used to create Time object, to actually construct
	///	with user defined values, use the static methods
	///
	///	\param	_microseconds	value to initialise Time object
	///							with in micro seconds
	///
	////////////////////////////////////////////////////////////
	explicit Time(long long _microseconds);
	
private:
	long long 	m_Microseconds;		///<	Value of Time object in micro seconds
};

////////////////////////////////////////////////////////////
//
//	Overload of == operator
//	compares if two Time objects are equal
//
////////////////////////////////////////////////////////////
bool operator ==(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of != operator
//	compares if two Time objects are not equal
//
////////////////////////////////////////////////////////////
bool operator !=(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of > operator
//	compares if one Time object is greater than another
//
////////////////////////////////////////////////////////////
bool operator >(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of >= operator
//	compares if one Time object is greater than/equal to another
//
////////////////////////////////////////////////////////////
bool operator >=(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of < operator
//	compares if one Time object is less than another
//
////////////////////////////////////////////////////////////
bool operator <(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of <= operator
//	compares if one Tine object is less than/equal to another
//
////////////////////////////////////////////////////////////
bool operator <=(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of - operator
//	returns negated Time object
//
////////////////////////////////////////////////////////////
Time operator -(const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of - operator
//	returns one Time object subtracted from another
//
////////////////////////////////////////////////////////////
Time operator -(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of -= operator
//	subtracts one Time object from another
//
////////////////////////////////////////////////////////////
Time& operator -=(Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of + operator
//	return one Time object added to another
//
////////////////////////////////////////////////////////////
Time operator +(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of += operator
//	adds one Time object to another
//
////////////////////////////////////////////////////////////
Time& operator +=(Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of * operator
//	returns a Time object multiplied by a float value (seconds)
//
////////////////////////////////////////////////////////////
Time operator *(const Time& _left, const float& _right);

////////////////////////////////////////////////////////////
//
//	Overload of * operator
//	return a Time object multiplied by a long long value (microseconds)
//
////////////////////////////////////////////////////////////
Time operator *(const Time& _left, const long long& _right);

////////////////////////////////////////////////////////////
//
//	Overload of * operator
//	returns a Time object multiplied by another
//
////////////////////////////////////////////////////////////
Time operator *(const float& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of * operator
//	returns a long long value (microseconds) multiplied by a Time object
//
////////////////////////////////////////////////////////////
Time operator *(const long long& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of *= operator
//	multiplies one Time object by a float value (seconds)
//
////////////////////////////////////////////////////////////
Time& operator *=(Time& _left, const float& _right);

////////////////////////////////////////////////////////////
//
//	Overload of *= operator
//	multiplies one Time object by a long long value (microseconds)
//
////////////////////////////////////////////////////////////
Time& operator *=(Time& _left, const long long& _right);

////////////////////////////////////////////////////////////
//
//	Overload of / operator
//	returns float value of one Time object divided by another
//
////////////////////////////////////////////////////////////
float operator /(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overoad of / operator
//	returns a Time object by a float value (seconds)
//
////////////////////////////////////////////////////////////
Time operator /(const Time& _left, const float& _right);

////////////////////////////////////////////////////////////
//
//	Overload of / operator
//	returns a Time object by a long long value (microseconds)
//
////////////////////////////////////////////////////////////
Time operator /(const Time& _left, const long long& _right);

////////////////////////////////////////////////////////////
//
//	Overload of /= operator
//	divides a Time object by a float value (seconds)
//
////////////////////////////////////////////////////////////
Time& operator /=(Time& _left, const float& _right);

////////////////////////////////////////////////////////////
//
//	Overload of /= operator
//	divides a Time object by a long long value (microseconds)
//
////////////////////////////////////////////////////////////
Time& operator /=(Time& _left, const long long& _right);

////////////////////////////////////////////////////////////
//
//	Overload of % operator
//	returns a Time object modulo another Time object
//
////////////////////////////////////////////////////////////
Time operator %(const Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of %= operator
//	modulos one TIme object by another Time object
//
////////////////////////////////////////////////////////////
Time& operator %=(Time& _left, const Time& _right);

////////////////////////////////////////////////////////////
//
//	Overload of << operator for std::ostream
//
////////////////////////////////////////////////////////////
std::ostream& operator <<(std::ostream& os, zeno::Time const& _time);
} //~ namespace zeno

#endif //~ INCLUDED_ZENO_SYSTEM_TIME_HPP

////////////////////////////////////////////////////////////
///
///	\class zeno::Time
///	\ingroup System
///
///	Explanation of how this all works
///
///	\code 
///	zeno::Time time = zeno::Time::seconds(0.0f);
///	\endcode
///
////////////////////////////////////////////////////////////