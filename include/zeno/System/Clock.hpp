#ifndef INCLUDED_ZENO_SYSTEM_CLOCK_HPP
#define INCLUDED_ZENO_SYSTEM_CLOCK_HPP

#include <zeno/System/Time.hpp>

////////////////////////////////////////////////////////////
///
///	\namespace	zeno
///
////////////////////////////////////////////////////////////
namespace zeno {

////////////////////////////////////////////////////////////
///
///	\brief	Utility class to measure time durations
///
////////////////////////////////////////////////////////////
class Clock
{
public:
	////////////////////////////////////////////////////////////
	///
	///	\brief	Default constructor
	///
	///	Creates clock object with no elapsed time
	///
	////////////////////////////////////////////////////////////
	Clock(void);
	
	////////////////////////////////////////////////////////////
	///
	///	\brief	Gets the time elapsed of this Clock
	///
	///	\return	Time object representing elapsed time
	///
	////////////////////////////////////////////////////////////
	Time getElapsedTime(void);
	////////////////////////////////////////////////////////////
	///
	///	\brief Gets the time elapsed of this clock and restarts
	///
	///	\return	Time object representing elapsed time
	///
	////////////////////////////////////////////////////////////
	Time restart(void);
	
private:
	////////////////////////////////////////////////////////////
	///
	///	\brief	Internal method used to calculate passage of time
	///
	///	\return Time object representing current time
	///
	////////////////////////////////////////////////////////////
	static Time getCurrentTime(void);
	
private:
	Time m_StartTime;		///<	Initialisation time of this Clock
};

} //~ namespace zeno

#endif //~ INCLUDED_ZENO_SYSTEM_CLOCK_HPP

////////////////////////////////////////////////////////////
///
///	\class zeno::Clock
///	\ingroup System
///
///	Explanation of how this all works
///
///	\code 
///	zeno::Clock clock;
///
///	clock.getElapsedTime().asSeconds();
///
///	clock.restart().asSeconds();
///
///	\endcode
///
////////////////////////////////////////////////////////////