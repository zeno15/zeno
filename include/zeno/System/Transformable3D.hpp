#ifndef INCLUDED_ZENO_SYSTEM_TRANSFORMABLE_3D_HPP
#define INCLUDED_ZENO_SYSTEM_TRANSFORMABLE_3D_HPP

#include <zeno/System/Mat4x4.hpp>

namespace zeno {

////////////////////////////////////////////////////////////
//
//	Base class that represents a 3D transformation
//
////////////////////////////////////////////////////////////
class Transformable3D
{
public:
	////////////////////////////////////////////////////////////
	//
	//	Default constructor, sets transform to identity matrix
	//
	////////////////////////////////////////////////////////////
	Transformable3D(void);

	
	////////////////////////////////////////////////////////////
	//
	//	Resets the transformation to the identity matrix
	//
	////////////////////////////////////////////////////////////
	void resetTransformation(void);


	////////////////////////////////////////////////////////////
	//
	//	Returns read only reference to the transformation
	//
	////////////////////////////////////////////////////////////
	const Mat4x4& getTransform(void) const;

	////////////////////////////////////////////////////////////
	//
	//	Returns read/write reference to the transformation
	//
	////////////////////////////////////////////////////////////
	Mat4x4& getTransform(void);
	

	////////////////////////////////////////////////////////////
	//
	//	Translates the transformation by the given offset
	//
	////////////////////////////////////////////////////////////
	void move(const Vector3f& _offset);
	////////////////////////////////////////////////////////////
	//
	//	Sets the translation of the transformation to the given
	//	position
	//
	////////////////////////////////////////////////////////////
	void setPosition(const Vector3f& _position);
	////////////////////////////////////////////////////////////
	//
	//	Gets the translation of the transformation
	//
	////////////////////////////////////////////////////////////
	Vector3f getPosition(void) const;

private:
	////////////////////////////////////////////////////////////
	//
	//	Internal representation of the transformation
	//
	////////////////////////////////////////////////////////////
	Mat4x4				m_Transform;
};

} //~ namespace zeno

#endif //~ INCLUDED_ZENO_SYSTEM_TRANSFORMABLE_3D_HPP