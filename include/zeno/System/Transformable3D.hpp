#ifndef INCLUDED_ZENO_SYSTEM_TRANSFORMABLE_3D_HPP
#define INCLUDED_ZENO_SYSTEM_TRANSFORMABLE_3D_HPP

#include <zeno/System/Mat4x4.hpp>

////////////////////////////////////////////////////////////
///
///	\namespace	zeno
///
////////////////////////////////////////////////////////////
namespace zeno {

////////////////////////////////////////////////////////////
///
///	\brief	Class that represents a 3D transformation
///
////////////////////////////////////////////////////////////
class Transformable3D
{
public:
	////////////////////////////////////////////////////////////
	///
	///	\brief		Default constructor
	///
	///	Initialises the internal transformation to the identity
	///	matrix
	///
	////////////////////////////////////////////////////////////
	Transformable3D(void);

	
	////////////////////////////////////////////////////////////
	///
	///	\brief		Resets the internal transformation to the
	///				identity matrix
	///
	////////////////////////////////////////////////////////////
	void resetTransformation(void);


	////////////////////////////////////////////////////////////
	///
	///	\brief		Gets a read only reference to the transform
	///
	///	\return		Mat4x4 read only reference
	///
	////////////////////////////////////////////////////////////
	const Mat4x4& getTransform(void) const;

	////////////////////////////////////////////////////////////
	///
    /// \brief      Gets a read/write reference to the transform
    ///
    /// \return     Mat4x4 read/write reference
    ///
	////////////////////////////////////////////////////////////
	Mat4x4& getTransform(void);
	

	////////////////////////////////////////////////////////////
	///
    /// \brief      Increases the translation by the given offset
    ///
    /// \param      _offset Vector3
    ///
	////////////////////////////////////////////////////////////
	void move(const Vector3f& _offset);
	////////////////////////////////////////////////////////////
	///
    /// \brief      Sets the translation to the given position
    ///
    /// \param      _position Vector3
    ///
	////////////////////////////////////////////////////////////
	void setPosition(const Vector3f& _position);
	////////////////////////////////////////////////////////////
	///
    /// \brief      Gets the accumulated translation
    ///
    /// \return     Vector3 representing the translation
    ///
	////////////////////////////////////////////////////////////
	Vector3f getPosition(void) const;

private:
	Mat4x4				m_Transform;    ///<    Internal representation of the transformation

};

} //~ namespace zeno

#endif //~ INCLUDED_ZENO_SYSTEM_TRANSFORMABLE_3D_HPP

////////////////////////////////////////////////////////////
///
///	\class zeno::Transformable3D
///	\ingroup System
///
///	Explanation of how this all works
///
///	\code
///	zeno::Transformable3D transform = zeno::Transformable3D();
///	\endcode
///
////////////////////////////////////////////////////////////