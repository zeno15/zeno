#ifndef INCLUDED_ZENO_SYSTEM_RECT_HPP
#define INCLUDED_ZENO_SYSTEM_RECT_HPP

#include <zeno/System/Vector2.hpp>

#include <algorithm>

namespace zeno {

////////////////////////////////////////////////////////////
//
//	Template class for 2 rectangle operations
//
////////////////////////////////////////////////////////////
template <typename T>
class Rect
{
public:
	////////////////////////////////////////////////////////////
	//
	//	Default constructor, bottom left at 0,0 and size = 0x0
	//
	////////////////////////////////////////////////////////////
	Rect(void);
	
	////////////////////////////////////////////////////////////
	//
	//	Non-default constructor, sets bottom, left, width and height
	//
	////////////////////////////////////////////////////////////
	Rect(T _left, T _bot, T _width, T _height);
	
	////////////////////////////////////////////////////////////
	//
	//	Non -default constructor, sets position and size
	//
	////////////////////////////////////////////////////////////
	Rect(const Vector2<T>& _position, const Vector2<T>& _size);
	
	////////////////////////////////////////////////////////////
	//
	//	Copy constructor, from any template type
	//
	////////////////////////////////////////////////////////////
	template <typename U>
	explicit Rect(const Rect<U>& _rect);
	
	////////////////////////////////////////////////////////////
	//
	//	Checks if the given x and y coordinates are contained
	//
	////////////////////////////////////////////////////////////
	bool contains(T _x, T _y);
	////////////////////////////////////////////////////////////
	//
	//	Checks if the given position is contained
	//
	////////////////////////////////////////////////////////////
	bool contains(const Vector2<T>& _position);
	
	////////////////////////////////////////////////////////////
	//
	//	Checks if the given rect intersects with the current one,
	//	and if so returns the intersection region
	//
	////////////////////////////////////////////////////////////
	bool intersects(const Rect<T>& _rect, Rect<T>& _intersection = Rect<T>());
	
public:
	////////////////////////////////////////////////////////////
	//
	//	left-most x coordinate of rectangle
	//
	////////////////////////////////////////////////////////////
	T left;
	////////////////////////////////////////////////////////////
	//
	//	bottom-most y coordinate of rectangle
	//
	////////////////////////////////////////////////////////////
	T bot;
	////////////////////////////////////////////////////////////
	//
	//	width of the rectangle
	//
	////////////////////////////////////////////////////////////
	T width;
	////////////////////////////////////////////////////////////
	//
	//	height of the rectangle
	//
	////////////////////////////////////////////////////////////
	T height;
};

////////////////////////////////////////////////////////////
//
//	Overload of == operator
//
////////////////////////////////////////////////////////////
template <typename T>
bool operator ==(const Rect<T>& _left, const Rect<T>& _right);

////////////////////////////////////////////////////////////
//
//	Overload of != operator
//
////////////////////////////////////////////////////////////
template <typename T>
bool operator !=(const Rect<T>& _left, const Rect<T>& _right);

#include "Rect.inl"

typedef Rect<int> IntRect;
typedef Rect<float> FloatRect;

} //~ namespace zeno

#endif //~ INCLUDED_ZENO_SYSTEM_RECT_HPP
