#ifndef INCLUDED_ZENO_GRAPHICS_TEXT_HPP
#define INCLUDED_ZENO_GRAPHICS_TEXT_HPP

#include <string>

#include <zeno/Graphics/Colour.hpp>
#include <zeno/Graphics/RenderData.hpp>

namespace zeno {

class Font;

////////////////////////////////////////////////////////////
//
//	Class for drawing 2D text generated from a font
//
////////////////////////////////////////////////////////////
class Text
{
public:
	////////////////////////////////////////////////////////////
	//
	//	Default constructor
	//
	////////////////////////////////////////////////////////////
	Text(void);
	////////////////////////////////////////////////////////////
	//
	//	Destructor
	//
	////////////////////////////////////////////////////////////
	~Text(void);

	////////////////////////////////////////////////////////////
	//
	//	Generates the verticies so the Text object is ready to 
	//	render
	//
	////////////////////////////////////////////////////////////
	void generateText(const std::string& _text, Font *_font);

	////////////////////////////////////////////////////////////
	//
	//	Renders the Text with the given renderData
	//
	////////////////////////////////////////////////////////////
	void render(RenderData _data);

	////////////////////////////////////////////////////////////
	//
	//	Sets the colour to set the text to 
	//
	////////////////////////////////////////////////////////////
	void setColour(const Colour& _colour);
	
	////////////////////////////////////////////////////////////
	//
	//	Enables kerning for text
	//
	////////////////////////////////////////////////////////////
	void setKerning(bool _kerning = true);

private:
	////////////////////////////////////////////////////////////
	//
	//	The font for the Text
	//
	////////////////////////////////////////////////////////////
	Font *					m_Font;

	unsigned int			m_VAO;

	unsigned int			m_Verticies;

	Colour					m_TextColour;

	bool					m_UseKerning;
};

} //~ namespace zeno

#endif //~ INCLUDED_ZENO_GRAPHICS_TEXT_HPP