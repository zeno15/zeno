#ifndef INCLUDED_ZENO_GRAPHICS_FONT_HPP
#define INCLUDED_ZENO_GRAPHICS_FONT_HPP

#include <zeno/Graphics/FontLoader.hpp>
#include <zeno/Graphics/FontAtlasImage.hpp>
#include <zeno/Graphics/Glyph.hpp>
#include <zeno/Graphics/Texture.hpp>
#include <zeno/Graphics/Vertex.hpp>

#include <string>
#include <vector>

namespace zeno {

////////////////////////////////////////////////////////////
//
//	Class that manages fonts, loads them, generates atlas'
//	and creates vertex/texture coordinates for text
//
////////////////////////////////////////////////////////////
class Font
{
public:
	////////////////////////////////////////////////////////////
	//
	//	Default constructor
	//
	////////////////////////////////////////////////////////////
	Font(void);
	////////////////////////////////////////////////////////////
	//
	//	Specific font constructor
	//
	////////////////////////////////////////////////////////////
	Font(const std::string& _font);

	////////////////////////////////////////////////////////////
	//
	//	Destructor
	//
	////////////////////////////////////////////////////////////
	~Font(void);


	////////////////////////////////////////////////////////////
	//
	//	Loads a font from the given file name
	//
	////////////////////////////////////////////////////////////
	bool loadFont(const std::string& _font);

	///////////////////////////////////////////////////////////
	//
	//	Temporary function, renders the given string to the 
	//	given image
	//
	///////////////////////////////////////////////////////////
	void renderString(const std::string& _string, Image& _image);

	///////////////////////////////////////////////////////////
	//
	//
	//
	///////////////////////////////////////////////////////////
	std::vector<Vertex> createVerticies(const std::string& _string);
	

	///////////////////////////////////////////////////////////
	//
	//	Get the font texture
	//
	///////////////////////////////////////////////////////////
	Texture *getTexture(void);

public:
	////////////////////////////////////////////////////////////
	//
	//	Adds the character represented by the given character
	//	code to the font atlas and glyph vector.  Returns the 
	//	glyph location in the vector
	//
	////////////////////////////////////////////////////////////
	int createGlyph(int _charCode);

	////////////////////////////////////////////////////////////
	//
	//	Get the index in the glyph vector of the given character
	//	code, returns -1 if not present
	//
	////////////////////////////////////////////////////////////
	int getGlyphIndex(int _charCode);
	
	///////////////////////////////////////////////////////////
	//
	//
	//
	///////////////////////////////////////////////////////////
	void createCharVertexes(std::vector<Vertex>& _verticies, int _character, Vector2f& _drawPosition);

	void saveTexture(const std::string& _filename);

private:
	////////////////////////////////////////////////////////////
	//
	//	Font loader
	//
	////////////////////////////////////////////////////////////
	FontLoader					m_Loader;

	////////////////////////////////////////////////////////////
	//
	//	Font Atlas
	//
	////////////////////////////////////////////////////////////
	FontAtlasImage				m_Atlas;

	////////////////////////////////////////////////////////////
	//
	//	Vector of glyphs that are present
	//
	////////////////////////////////////////////////////////////
	std::vector<Glyph>			m_Glyphs;

	////////////////////////////////////////////////////////////
	//
	//	Vector of glyphs that are present
	//
	////////////////////////////////////////////////////////////
	Texture						m_Texture;
};

} //~ namespace zeno

#endif //~ INCLUDED_ZENO_GRAPHICS_FONT_HPP