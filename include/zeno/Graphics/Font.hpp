#ifndef INCLUDED_ZENO_GRAPHICS_FONT_HPP
#define INCLUDED_ZENO_GRAPHICS_FONT_HPP

#include <string>
#include <vector>

#include <ft2build.h>
#include FT_FREETYPE_H

#include <zeno/Graphics/Glyph.hpp>
#include <zeno/Graphics/Image.hpp>
#include <zeno/Graphics/Texture.hpp>

namespace zeno {

////////////////////////////////////////////////////////////
//
//	Class that manages fonts, loads them, generates atlas'
//	and creates vertex/texture coordinates for text
//
////////////////////////////////////////////////////////////
class Font
{
public:
	////////////////////////////////////////////////////////////
	//
	//	Default constructor
	//
	////////////////////////////////////////////////////////////
	Font(void);
	////////////////////////////////////////////////////////////
	//
	//	Destructor
	//
	////////////////////////////////////////////////////////////
	~Font(void);

	////////////////////////////////////////////////////////////
	//
	//	Loads the font from the given filename
	//
	////////////////////////////////////////////////////////////
	bool loadFromFile(const std::string& _filename, unsigned int _fontSize);

	////////////////////////////////////////////////////////////
	//
	//	Returns the glyph index
	//
	////////////////////////////////////////////////////////////
	FT_UInt getGlyphIndex(int _character);

	////////////////////////////////////////////////////////////
	//
	//	Gets the glyph associated with the glyph index
	//
	////////////////////////////////////////////////////////////
	FT_GlyphSlot getGlyph(FT_UInt _glyphIndex);

	bool addGlyphToAtlas(int _character, Image& _atlas);

	Glyph getGlyph(int _character);

	std::vector<float> getVertexData(int _character, const Vector2f& _penPosition);

	FT_Vector getKerning(int _previous, int _current);

	Image& getAtlas(void);

	Texture& getTextureAtlas(void);

	void updateTextureIfNeeded(void);

private:
	////////////////////////////////////////////////////////////
	//
	//	The size of the font
	//
	////////////////////////////////////////////////////////////
	unsigned int				m_FontSize;
	
	////////////////////////////////////////////////////////////
	//
	//	Handle to the free type library
	//
	////////////////////////////////////////////////////////////
	FT_Library					m_Library;
	
	////////////////////////////////////////////////////////////
	//
	//	Handle to the free type font face
	//
	////////////////////////////////////////////////////////////
	FT_Face						m_Face;

	////////////////////////////////////////////////////////////
	//
	//	Vector of the glyphs the font currently has in its atlas
	//
	////////////////////////////////////////////////////////////
	std::vector<Glyph>			m_Glyphs;

	////////////////////////////////////////////////////////////
	//
	//	Atlas for the font, contains all glyphs that the font
	//	can draw
	//
	////////////////////////////////////////////////////////////
	Image						m_Atlas;

	////////////////////////////////////////////////////////////
	//
	//	Texture of the font atlas
	//
	////////////////////////////////////////////////////////////
	Texture						m_AtlasTexture;

	bool						m_AtlasTextureNeedsUpdating;

	unsigned int				m_CurrentX;
	unsigned int				m_CurrentY;
	unsigned int				m_NextY;
};

} //~ namespace zeno

#endif //~ INCLUDED_ZENO_GRAPHICS_FONT_HPP