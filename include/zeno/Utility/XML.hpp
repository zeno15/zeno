#ifndef INCLUDED_ZENO_UTILITY_XML_HPP
#define INCLUDED_ZENO_UTILITY_XML_HPP

#include <string>
#include <vector>
#include <functional>

////////////////////////////////////////////////////////////
///
///	\namespace	zeno
///
////////////////////////////////////////////////////////////
namespace zeno {

////////////////////////////////////////////////////////////
///
///	\brief	Class to implement basic XML creation/parsing
///
////////////////////////////////////////////////////////////
class XML
{
public:
    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    XML(void);

    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void loadFromFile(const std::string &_filename);

private:
    enum QuoteType {
        Double,
        Single,
        Neither
    };

    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void readTag(std::ifstream& _input);
    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void readContent(std::ifstream& _input);
    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void handleContent(std::string& _content);
    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void handleGenericTag(const std::string& _tag);
    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void parseDeclaration(const std::string& _declarationTag);
    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void parseCommentTag(const std::string& _commentTag);
    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void parseOpeningTag(const std::string& _openingTag);
    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void parseClosingTag(const std::string& _closingTag);
    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    void parseSelfClosingTag(const std::string& _selfClosingTag);

    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    std::vector<std::pair<std::string, std::string>> extractAttributes(const std::string& _attributeString);

    ////////////////////////////////////////////////////////////
    ///
    ///
    ///
    ////////////////////////////////////////////////////////////
    QuoteType discoverNextAttributeQuoteType(const std::string& _attributes);
    
private:
    std::function<void(const std::string&)>                     m_TagOpenMethod;    ///~ Method to call when opening Tag is found
    std::function<void(const std::string&)>                     m_TagCloseMethod;    ///~ Method to call when opening Tag is found

};

} //~ namespace zeno

#endif //~ INCLUDED_ZENO_UTILITY_XML_HPP