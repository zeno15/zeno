#ifndef INCLUDED_VECTOR_3_HPP
#define INCLUDED_VECTOR_3_HPP

#include <ostream>

#include <cmath>

namespace zeno {

////////////////////////////////////////////////////////////
//
//	Template class for 3D Vector3s
//
////////////////////////////////////////////////////////////
template <typename T>
class Vector3
{
public:
	////////////////////////////////////////////////////////////
	//
	//	Default constructor, initialises x and y and z to zero
	//
	////////////////////////////////////////////////////////////
	Vector3();

	////////////////////////////////////////////////////////////
	//
	//	Initialises x and y and z to the given values
	//
	////////////////////////////////////////////////////////////
	Vector3(T _x, T _y, T _z);

	////////////////////////////////////////////////////////////
	//
	//	Copy constructor, initialises x and y and z to the same 
	//	values the _vec has
	//
	////////////////////////////////////////////////////////////
	template <typename U>
	Vector3(const Vector3<U>& _vec);
	
	////////////////////////////////////////////////////////////
	//
	//	Returns the cross product of the given vectors
	//
	////////////////////////////////////////////////////////////
	Vector3<T> cross(const Vector3<T>& _vec) const;
	
	////////////////////////////////////////////////////////////
	//
	//	Normalises the vector
	//
	////////////////////////////////////////////////////////////
	Vector3<T>& normalise(void);
	
	////////////////////////////////////////////////////////////
	//
	//	Returns the magnitude of the vector
	//
	////////////////////////////////////////////////////////////
	float magnitude(void) const;

public:
	////////////////////////////////////////////////////////////
	//
	//	Member variable, x coordinate
	//
	////////////////////////////////////////////////////////////
	T x;
	////////////////////////////////////////////////////////////
	//
	//	Member variable, y coordinate
	//	
	////////////////////////////////////////////////////////////
	T y;
	////////////////////////////////////////////////////////////
	//
	//	Member variable, z coordinate
	//	
	////////////////////////////////////////////////////////////
	T z;
};

////////////////////////////////////////////////////////////
//
//	Overload of - operator
//	returns negated vector
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T> operator -(const Vector3<T>& _right);

////////////////////////////////////////////////////////////
//
//	Overload of -= operator
//	Modifies _left by subtracting _right from it
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T>& operator -=(Vector3<T>& _left, const Vector3<T>& _right);

////////////////////////////////////////////////////////////
//
//	Overload of - operator
//	returns subtraction of _right from _left
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T> operator -(const Vector3<T>& _left, const Vector3<T>& _right);

////////////////////////////////////////////////////////////
//
//	Overlaod of += operator
//	Modifies _left by adding _right to it
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T> operator +=(Vector3<T>& _left, const Vector3<T>& _right);

////////////////////////////////////////////////////////////
//
//	Overload of + operator
//	returns addition of _left and _right
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T> operator +(const Vector3<T>& _left, const Vector3<T>& _right);

////////////////////////////////////////////////////////////
//
//	Overload of /= operator
//	Modifies _left by dividing by _right per value
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T>& operator /=(Vector3<T>& _left, T _right);

////////////////////////////////////////////////////////////
//
//	Overload of / operator
//	returns component wise division of _left by _right
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T> operator /(const Vector3<T>& _left, T _right);

////////////////////////////////////////////////////////////
//
//	Overload of *= operator
//	modifies _left by multiplying by _right per value
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T> operator *=(Vector3<T>& _left, T _right);

////////////////////////////////////////////////////////////
//
//	Overload of * operator
//	returns component wise multiplication of _left by _right
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T> operator *(const Vector3<T>& _left, T _right);

////////////////////////////////////////////////////////////
//
//	Overload of * operator
//	returns component wise multiplication of _right by _left
//
////////////////////////////////////////////////////////////
template <typename T>
Vector3<T> operator *(T _left, const Vector3<T>& _right);

////////////////////////////////////////////////////////////
//
//	Overload of == operator
//	returns boolean on whether the components of both
//	vectors are the same (no tolerance)
//
////////////////////////////////////////////////////////////
template <typename T>
bool operator ==(const Vector3<T>& _left, const Vector3<T>& _right);

////////////////////////////////////////////////////////////
//
//	Overload of != operator
//	returns boolean on whether the components of both
//	vectors are not the same (no tolerance)
//
////////////////////////////////////////////////////////////
template <typename T>
bool operator !=(const Vector3<T>& _left, const Vector3<T>& _right);

////////////////////////////////////////////////////////////
//
//	Overload of << operator for std::ostream
//
////////////////////////////////////////////////////////////
template <typename T>
std::ostream& operator <<(std::ostream& os, zeno::Vector3<T> const& _vec);




#include "Vector3.inl"

typedef Vector3<int>				Vector3i;
typedef Vector3<unsigned int>			Vector3u;
typedef Vector3<float>				Vector3f;
typedef Vector3<double>				Vector3d;

} //~ namespace zeno

#endif //~ INCLUDED_VECTOR_3_HPP
